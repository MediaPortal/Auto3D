<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAIMAAAA4CAYAAADekEvQAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAZdEVYdFNvZnR3YXJlAEFkb2JlIEltYWdlUmVhZHlxyWU8AAADImlUWHRYTUw6Y29tLmFkb2Jl
        LnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQi
        Pz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENv
        cmUgNS4zLWMwMTEgNjYuMTQ1NjYxLCAyMDEyLzAyLzA2LTE0OjU2OjI3ICAgICAgICAiPiA8cmRmOlJE
        RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8
        cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20v
        eGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxu
        czpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1w
        OkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M2IChXaW5kb3dzKSIgeG1wTU06SW5zdGFuY2VJ
        RD0ieG1wLmlpZDoxOUI3OEQ2ODk0Q0ExMUUyOEQyOEVDOEEwNEI5MjFDQiIgeG1wTU06RG9jdW1lbnRJ
        RD0ieG1wLmRpZDoxOUI3OEQ2OTk0Q0ExMUUyOEQyOEVDOEEwNEI5MjFDQiI+IDx4bXBNTTpEZXJpdmVk
        RnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjE5Qjc4RDY2OTRDQTExRTI4RDI4RUM4QTA0Qjky
        MUNCIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjE5Qjc4RDY3OTRDQTExRTI4RDI4RUM4QTA0Qjky
        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
</value>
  </data>
</root>